From: Stephen Farrell <stephen.farrell@cs.tcd.ie>
Date: Mon, 2 Oct 2023 16:49:30 +0100
Subject: support ECHConfigList from command line for boringssl version

---
 docs/ECH.md        |  4 ++--
 lib/vtls/openssl.c | 28 ++++++++++++++++++++++++++--
 2 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/docs/ECH.md b/docs/ECH.md
index 0947dd2..2e43492 100644
--- a/docs/ECH.md
+++ b/docs/ECH.md
@@ -347,8 +347,8 @@ client support for ECH seems to not correctly support HelloRetryRequest.
 
 ## boringssl build
 
-The boringssl APIs do not support the ``--ech ecl:`` or the ``--ech pn:``
-command line options as of now.
+The boringssl APIs do not support the the ``--ech pn:`` command line variant as
+of now.
 
 BoringSSL is also supported by curl and also supports ECH, so to build
 one of those:
diff --git a/lib/vtls/openssl.c b/lib/vtls/openssl.c
index 7b86005..92c6c8a 100644
--- a/lib/vtls/openssl.c
+++ b/lib/vtls/openssl.c
@@ -85,6 +85,8 @@
 #ifdef USE_ECH
 # ifndef OPENSSL_IS_BORINGSSL
 #  include <openssl/ech.h>
+# else
+#  include "curl_base64.h"
 # endif
 #endif /* USE_ECH */
 
@@ -3815,8 +3817,30 @@ static CURLcode ossl_connect_step1(struct Curl_cfilter *cf,
     }
     if(data->set.tls_ech == CURLECH_CLA_CFG) {
 #ifdef OPENSSL_IS_BORINGSSL
-      infof(data, "ECH: boringssl doesn't support command line ECH");
-      return CURLE_SSL_CONNECT_ERROR;
+      /* have to do base64 decode here for boring */
+      const char *b64 = data->set.str[STRING_ECH_CONFIG];
+
+      if(!b64) {
+        infof(data, "ECH: ECHConfig from command line empty");
+        return CURLE_SSL_CONNECT_ERROR;
+      }
+      ech_config_len = 2 * strlen(b64);
+      result = Curl_base64_decode(b64, &ech_config, &ech_config_len);
+      if(result || !ech_config) {
+        infof(data, "ECH: can't base64 decode ECHConfig from command line");
+        if(data->set.tls_ech == CURLECH_HARD)
+          return result;
+      }
+      if(SSL_set1_ech_config_list(backend->handle,
+                                  ech_config, ech_config_len) != 1) {
+        infof(data, "ECH: SSL_ECH_set1_echconfig failed");
+        if(data->set.tls_ech == CURLECH_HARD) {
+          free(ech_config);
+          return CURLE_SSL_CONNECT_ERROR;
+        }
+      }
+      free(ech_config);
+      trying_ech_now = 1;
 #else
       ech_config = (unsigned char *) data->set.str[STRING_ECH_CONFIG];
       if(!ech_config) {
