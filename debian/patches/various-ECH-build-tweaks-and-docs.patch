From: Stephen Farrell <stephen.farrell@cs.tcd.ie>
Date: Tue, 19 Sep 2023 00:15:25 +0100
Subject: various ECH build tweaks and docs

---
 configure.ac                   |  16 +-
 docs/ECH.md                    | 329 +++++++++++++++++++++++++++++++++++++++++
 docs/EXPERIMENTAL.md           |   1 +
 docs/cmdline-opts/Makefile.inc |   4 +
 docs/cmdline-opts/ech-hard.d   |  15 ++
 docs/cmdline-opts/ech.d        |  15 ++
 docs/cmdline-opts/echconfig.d  |  17 +++
 docs/cmdline-opts/echpublic.d  |  16 ++
 m4/curl-confopts.m4            |  37 +++++
 9 files changed, 449 insertions(+), 1 deletion(-)
 create mode 100644 docs/ECH.md
 create mode 100644 docs/cmdline-opts/ech-hard.d
 create mode 100644 docs/cmdline-opts/ech.d
 create mode 100644 docs/cmdline-opts/echconfig.d
 create mode 100644 docs/cmdline-opts/echpublic.d

diff --git a/configure.ac b/configure.ac
index b14477a..fc9e441 100644
--- a/configure.ac
+++ b/configure.ac
@@ -51,6 +51,7 @@ CURL_CHECK_OPTION_CURLDEBUG
 CURL_CHECK_OPTION_SYMBOL_HIDING
 CURL_CHECK_OPTION_ARES
 CURL_CHECK_OPTION_RT
+CURL_CHECK_OPTION_HTTPSRR
 CURL_CHECK_OPTION_ECH
 
 XC_CHECK_PATH_SEPARATOR
@@ -4374,6 +4375,18 @@ if test "x$hsts" != "xyes"; then
   AC_DEFINE(CURL_DISABLE_HSTS, 1, [disable alt-svc])
 fi
 
+
+dnl *************************************************************
+dnl check whether HTTPSRR support if desired
+dnl
+if test "x$want_httpsrr" != "xno"; then
+  AC_MSG_RESULT([HTTPSRR support is available])
+  AC_DEFINE(USE_HTTPSRR, 1, [enable HTTPS RR support])
+  experimental="$experimental HTTPSRR"
+else
+  AC_DEFINE(USE_HTTPSRR, 0, [HTTPS RR support off])
+fi
+
 dnl *************************************************************
 dnl check whether ECH support, if desired, is actually available
 dnl
@@ -4401,8 +4414,9 @@ if test "x$want_ech" != "xno"; then
 
   dnl now deal with whatever we found
   if test "x$ECH_ENABLED" = "x1"; then
+    dnl force pre-requisites for ECH
+    AC_DEFINE(USE_HTTPSRR, 1, [force HTTPS RR support for ECH])
     AC_DEFINE(USE_ECH, 1, [if ECH support is available])
-    AC_DEFINE(USE_HTTPSRR, 1, [if ECH support is available])
     AC_MSG_RESULT($ECH_SUPPORT)
     experimental="$experimental ECH"
   else
diff --git a/docs/ECH.md b/docs/ECH.md
new file mode 100644
index 0000000..38286b9
--- /dev/null
+++ b/docs/ECH.md
@@ -0,0 +1,329 @@
+
+# Building curl with HTTPS-RR and ECH support
+
+We've added support for ECH to a recent curl build. That can use HTTPS RRs
+published in the DNS, if curl is using DoH, or else can accept the relevant
+ECHConfig values from the command line. That works with either OpenSSL or
+WolfSSL as it's TLS provider, depending on how you build curl.
+
+This has not been tested. DO NOT USE!
+
+But hopefully, this provides enough of a proof-of-concept to prompt an informed
+discussion about a good path forward for ECH support in curl, when using
+OpenSSL, or other TLS libraries, as those add ECH support.
+
+## OpenSSL Build
+
+To build our ECH-enabled OpenSSL fork:
+
+            $ cd $HOME/code
+            $ git clone https://github.com/sftcd/openssl
+            $ cd openssl
+            $ git checkout ECH-draft-13c
+            $ ./config 
+            ... stuff ...
+            $ make -j8
+            ... stuff (maybe go for coffee) ...
+            $
+
+To build our ECH-enabled curl fork, making use of the above:
+
+            $ cd $HOME/code
+            $ git clone https://github.com/sftcd/curl
+            $ cd curl
+            $ git checkout ECH-experimental
+            $ autoreconf -fi
+            $ export LD_LIBRARY_PATH=$HOME/code/openssl
+            $ LDFLAGS="-L$HOME/code/openssl" ./configure --with-ssl=$HOME/code/openssl --enable-ech --enable-httpsrr
+            ...lots of output...
+              WARNING: ech ECH HTTPSRR enabled but marked EXPERIMENTAL. Use with caution!
+            $ make 
+            ...lots more output...
+ 
+If you don't get that WARNING at the end of the ``configure`` command, then ECH
+isn't enabled, so go back some steps and re-do whatever needs re-doing:-) If you
+want to debug curl then you should add ``--enable-debug`` to the ``configure``
+command.
+
+## Using ECH and DoH
+
+Curl supports using DoH for A/AAAA lookups so it was relatively easy to add
+retrieval of HTTPS RRs in that situation. To use ECH and DoH together:
+
+            $ cd $HOME/code/curl
+            $ LD_LIBRARY_PATH=$HOME/code/openssl ./src/curl --ech --doh-url https://1.1.1.1/dns-query https://defo.ie/ech-check.php
+            ...
+            SSL_ECH_STATUS: success <img src="greentick-small.png" alt="good" /> <br/>
+            ... 
+
+The output snippet above is within the HTML for the web page, when things work.
+
+The above works for https://defo.ie/ech-check.php,
+https://draft-13.esni.defo.ie:8413/stats,
+https://crypto.cloudflare.com/cdn-cgi/trace and https://tls-ech.dev so we seem
+to have the basic thing functioning now.
+
+We currently support the following new curl comand line arguments/options:
+
+- ``--ech``: tells client to attempt ECH if possible (opportunistic) based on
+  an HTTPS RR value found in the DNS, accessed using DoH
+- ``--ech-hard``: tells client to attempt ECH as above or fail if that's not
+  possible
+- ``--echconfig``: supplies an ECHConfig from command line that will be used in
+  preference to a value found in the answer to a DNS query for an HTTPS RR
+- ``--echpublic``: over-rides the ``public_name`` from the ECHConfig with a
+  name from the command line
+
+Note that in the above "attempt ECH" means the client emitting a TLS
+ClientHello with a "real" ECH extension, but that does not mean that the
+relevant server will succeed in decrypting, as things can fail for other
+reasons.
+
+## Supplying an ECHConfig on the command line
+
+To supply the ECHConfig on the command line, you might need a bit of
+cut'n'paste, e.g.:
+
+            $ dig +short https defo.ie
+            1 . ipv4hint=213.108.108.101 ech=AED+DQA8PAAgACD8WhlS7VwEt5bf3lekhHvXrQBGDrZh03n/LsNtAodbUAAEAAEAAQANY292ZXIuZGVmby5pZQAA ipv6hint=2a00:c6c0:0:116:5::10
+
+Then paste the base64 encoded ECHConfig onto the curl command line:
+
+            $ LD_LIBRARY_PATH=$HOME/code/openssl ./src/curl --ech --echconfig AED+DQA8PAAgACD8WhlS7VwEt5bf3lekhHvXrQBGDrZh03n/LsNtAodbUAAEAAEAAQANY292ZXIuZGVmby5pZQAA https://defo.ie/ech-check.php
+            ...
+            SSL_ECH_STATUS: success <img src="greentick-small.png" alt="good" /> <br/>
+            ... 
+
+The output snippet above is within the HTML for the web page.
+
+If you paste in the wrong ECHConfig (it changes hourly for ``defo.ie``) you'll
+get an error like this:
+
+            $ LD_LIBRARY_PATH=$HOME/code/openssl ./src/curl -vvv --ech --echconfig AED+DQA8yAAgACDRMQo+qYNsNRNj+vfuQfFIkrrUFmM4vogucxKj/4nzYgAEAAEAAQANY292ZXIuZGVmby5pZQAA https://defo.ie/ech-check.php
+            ...
+            * OpenSSL/3.2.0: error:0A00054B:SSL routines::ech required
+            ...
+
+There is a reason to keep this command line option - for use before publishing
+the ECHConfig in the DNS (e.g. see
+[draft-ietf-tls-wkech](https://datatracker.ietf.org/doc/draft-ietf-tls-wkech/)).
+
+## Default settings
+
+Curl has various ways to configure default settings, e.g. in ``$HOME/.curlrc``,
+so one can set the DoH URL and enable ECH that way:
+
+            $ cat ~/.curlrc
+            doh-url=https://one.one.one.one/dns-query
+            silent=TRUE
+            ech=TRUE
+            $
+
+Note that when you use the system's curl command (rather than our ECH-enabled
+build), it's liable to warn that ``ech`` is an unknown option. If that's an
+issue (e.g. if some script re-directs stdout and stderr somewhere) then adding
+the ``silent=TRUE`` line above seems to be a good enough fix. (Though of
+course, yet another script could depend on non-silent behaviour, so you'll have
+to figure out what you prefer youself.)
+
+And if you want to always use our OpenSSL build you can set ``LD_LIBRARY_PATH``
+in the environment:
+
+            $ export LD_LIBRARY_PATH=$HOME/code/openssl
+            $
+
+Note that when you do that, there can be a mismatch between OpenSSL versions
+for applications that check that. A ``git push`` for example will fail so you
+should unset ``LD_LIBRARY_PATH`` before doing that or use a different shell.
+
+            $ git push
+            OpenSSL version mismatch. Built against 30000080, you have 30200000
+            ...
+
+With all that setup as above the command line gets simpler:
+
+            $ ./src/curl https://defo.ie/ech-check.php
+            ...
+            SSL_ECH_STATUS: success <img src="greentick-small.png" alt="good" /> <br/>
+            ... 
+
+The ``--ech`` option is opportunistic, so will try to do ECH but won't fail if
+the client e.g. can't find any ECHConfig values.  The ``--ech-hard`` option
+hard-fails if there is no ECHConfig found in DNS, so for now, that's not a good
+option to set as a default.
+
+## Code changes for ECH support when using DoH
+
+All code changes are in a new ``ECH-experimental`` branch of our fork
+([here](https://github.com/sftcd/curl/tree/ECH-experimental)) and are
+``#ifdef`` protected via ``USE_ECH`` or ``USE_HTTPSRR``: 
+
+- ``USE_HTTPSRR`` is used for HTTPS RR retrieval code that could be generically
+  used should non-ECH uses for HTTPS RRs be identified, e.g. use of ALPN values
+or IP address hints.
+
+- ``USE_ECH`` protects ECH specific code, which is likely almost all also
+  OpenSSL-specific. (Though some fragments should be usable for other TLS
+libraries in future.)
+
+There are various obvious code blocks for handling the new command line
+arguments which aren't described here, but should be fairly clear.
+
+As shown in the ``configure`` usage above, there are ``configure.ac`` changes
+that allow separately dis/enabling ``USE_HTTPSRR`` and ``USE_ECH``. If ``USE_ECH``
+is enabled, then ``USE_HTTPSRR`` will be forced. In both cases ``USE_DOH``
+is required. (There may be some configuration conflicts available for the
+determined:-)
+
+The main functional change, as you'd expect, is in ``lib/vtls/openssl.c``
+([here](https://github.com/sftcd/curl/blob/ECH-experimental/lib/vtls/openssl.c#L3768))
+where an ECHConfig, if available from command line or DNS cache, is fed into
+the OpenSSL library via the new APIs implemented in our OpenSSL fork for that
+purpose.  This code also implements the opportunistic (``--ech``) or hard-fail
+(``--ech-hard``) logic. (There's about 100 new LOC involved there.)
+
+Other than that, the main additions are in ``lib/doh.c``
+([here](https://github.com/sftcd/curl/blob/ECH-experimental/lib/doh.c#L418))
+where we re-use ``dohprobe()`` to retrieve an HTTPS RR value for the target
+domain.  If such a value is found, that's stored using a new ``store_https()``
+function
+([here](https://github.com/sftcd/curl/blob/ECH-experimental/lib/doh.c#L527)) in
+a new field in the ``dohentry`` structure.
+
+The qname for the DoH query is modified if the port number is not 443, as
+defined in the SCVB specification.
+([here](https://github.com/sftcd/curl/blob/ECH-experimental/lib/doh.c#L418))
+
+When the DoH process has worked, ``Curl_doh_is_resolved()`` now also returns
+the relevant HTTPS RR value data in the ``Curl_dns_entry`` structure.
+([here](https://github.com/sftcd/curl/blob/ECH-experimental/lib/doh.c#L1086))
+That is later accessed when the TLS session is being established, if ECH is
+enabled (from ``lib/vtls/openssl.c`` as described above).
+
+A couple of things that need fixing, but that can probably be ignored for the
+moment:
+
+- We could easily add code to make use of an ``alpn=`` value found in an HTTPS
+  RR, passing that on to OpenSSL for use as the "inner" ALPN value, but have
+yet to do that.
+- Still need to properly free ``Curl_https_rrinfo`` structures in all cases.
+
+Current limitations (more interesting than the above):
+
+- Only the first HTTPS RR value retrieved is actually processed as described
+  above, that could be extended in future, though picking the "right" HTTPS RR
+could be non-trivial if multiple RRs are published - matching IP address hints
+versus A/AAAA values might be a good basis for that. Last I checked though,
+browsers supporting ECH didn't handle multiple HTTPS RRs well, though that
+needs re-checking as it's been a while.
+
+- It's unclear how one should handle any IP address hints found in an HTTPS RR.
+  It may be that a bit of consideration of how "multi-CDN" deployments might
+emerge would provide good answers there, but for now, it's not clear how best
+curl might handle those values when present in the DNS.
+
+- The SVCB/HTTPS RR specification supports a new "CNAME at apex" indirection
+  ("aliasMode") - the current code takes no account of that at all. One could
+envisage implementing the equivalent of following CNAMEs in such cases, but
+it's not clear if that'd be a good plan. (As of now, chrome browsers don't seem
+to have any support for that "aliasMode" and we've not checked Firefox for that
+recently.)
+
+- We have not investigated what related changes or additions might be needed
+  for applications using libcurl, as opposed to use of curl as a command line
+tool.
+
+## WolfSSL build
+
+Mailing list discussion indicates that WolfSSL also supports ECH and can be
+used by curl, so here's how: 
+
+            $ cd $HOME/code
+            $ git clone https://github.com/sftcd/wolfssl
+            $ cd wolfssl
+            $ ./autogen.sh
+            $ ./configure --prefix=$HOME/code/wolfssl/inst --enable-ech --enable-debug --enable-opensslextra
+            $ make
+            $ make install
+
+The install prefix (``inst``) in the above causes WolfSSL to be installed there
+and we seem to need that for the curl configure command to work out.  The
+``--enable-opensslextra`` turns out (after much faffing about;-) to be
+important or else we get build problems with curl below.
+
+Probably, a basic WolfSSL install would work fine but we made a fork just in
+case we wanted to change something, e.g. see [this
+issue](https://github.com/wolfSSL/wolfssl/issues/6774). 
+
+Let's use that to build curl...
+
+            $ cd $HOME/code
+            $ git clone https://github.com/sftcd/curl
+            $ cd curl
+            $ git checkout ECH-experimental
+            $ autoregen -fi
+            $ ./configure --with-wolfssl=$HOME/code/wolfssl/inst --enable-ech
+            $ make
+            ...
+
+Right now, this works almost the same as the OpenSSL variant, but not
+with tls-ech.dev, (see [same issue](https://github.com/wolfSSL/wolfssl/issues/6774),
+and for some reason ``--insecure`` is needed.
+
+To run against a localhost ``s_server`` for testing:
+
+            $ cd $HOME/code/openssl/esnistuff
+            $ ./echsrv.sh -d
+            ...
+
+In another window:
+
+            $ cd $HOME/code/curl-wo/
+            $ $ ./src/curl -vvv --insecure  --connect-to foo.example.com:8443:localhost:8443  https://foo.example.com:8443 --echconfig AD7+DQA6uwAgACBix2B78sX+EQhEbxMspDOc8Z3xVS5aQpYP0Cxpc2AWPAAEAAEAAQALZXhhbXBsZS5jb20AAA==
+
+### Changes to support WolfSSL
+
+There are what seem like oddball differences:
+
+- The DoH URL in``$HOME/.curlrc`` can use "1.1.1.1" for OpenSSL but has to be
+  "one.one.one.one" for WolfSSL. The latter works for both, so ok, we'll change
+  to that.
+- There seems to be some difference in CA databases too - the WolfSSL version
+  doesn't like defo.ie, wheraas the system and OpenSSL ones do. We can ignore
+  that for our purposes though via ``--insecure`` but would need to fix for a
+  PPA setup. (Browsers do like defo.ie's cert btw:-)
+
+Then there are some functional code changes:
+
+- tweak to ``configure.ac`` to check if WolfSSL has ECH or not 
+- added code to ``lib/vtls/wolfssl.c`` mirroring what's done in the
+  OpenSSL equivalent above.
+
+## Supporting ECH without DoH
+
+All of the above only applies if DoH is being used.  There should be a use-case
+for ECH when DoH is not used by curl - if a system stub resolver supports DoT
+or DoH, then, considering only ECH and the network threat model, it would make
+sense for curl to support ECH without curl itself using DoH.  The author for
+example uses a combination of stubby+unbound as the system resolver listening
+on localhost:53, so would fit this use-case.  That said, it's very unclear if
+this is a niche that's worth trying to address. (The author is just as happy to
+let curl use DoH to talk to the same public recursives that stubby might use:-)
+But assuming this is a use-case we'd like to support...
+
+If DoH is not being used by curl, it's not clear at this time how to provide
+support for ECH. One option would seem to be to extend the ``c-ares`` library
+to support HTTPS RRs, but in that case it's not now clear whether such changes
+would be attractive to the ``c-ares`` maintainers, nor whether the "tag=value"
+extensibility inherent in the HTTPS/SVCB specification is a good match for the
+``c-ares`` approach of defining structures specific to decoded answers for each
+supported RRtype.  We're also not sure how many downstream curl deployments
+actually make use of the ``c-ares`` library, which would affect the utility of
+such changes.  Another option might be to consider using some other generic DNS
+library (such as the getdnsapi) that does support HTTPS RRs, but it's unclear
+if such a library could or would be used by all or almost all curl builds and
+downstream releases of curl.
+
+Our current conclusion is that doing the above is likely best left until we
+have some experience with the "using DoH" stuff, so we're going to punt on
+this for now.
diff --git a/docs/EXPERIMENTAL.md b/docs/EXPERIMENTAL.md
index de69401..46fdb88 100644
--- a/docs/EXPERIMENTAL.md
+++ b/docs/EXPERIMENTAL.md
@@ -22,3 +22,4 @@ Experimental support in curl means:
  - HTTP/3 support (using the quiche or msh3 backends)
  - The rustls backend
  - WebSocket
+ - Use of the HTTPS resource record and Encrypted Client Hello (ECH) when using DoH
diff --git a/docs/cmdline-opts/Makefile.inc b/docs/cmdline-opts/Makefile.inc
index a7c92f2..6b3fb94 100644
--- a/docs/cmdline-opts/Makefile.inc
+++ b/docs/cmdline-opts/Makefile.inc
@@ -264,6 +264,10 @@ DPAGES = \
   tlsv1.2.d \
   tlsv1.3.d \
   tlsv1.d \
+  ech.d \
+  echconfig.d \
+  echpublic.d \
+  ech-hard.d \
   tr-encoding.d \
   trace-ascii.d \
   trace-config.d \
diff --git a/docs/cmdline-opts/ech-hard.d b/docs/cmdline-opts/ech-hard.d
new file mode 100644
index 0000000..1c92d23
--- /dev/null
+++ b/docs/cmdline-opts/ech-hard.d
@@ -0,0 +1,15 @@
+c: Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
+SPDX-License-Identifier: curl
+Long: ech-hard
+Arg: <name>
+Help: TLS Encrypted Client Hello (ECH)
+Added: x.xx.x
+Category: tls ECH
+Example: --ech-hard $URL
+See-also: echconfig echpublic ech doh-url
+Multi: single
+---
+Enable Encrypted Client Hello (ECH) for use with the TLS session, and
+fail if that's not pssible.
+
+This option only works with TLS 1.3.
diff --git a/docs/cmdline-opts/ech.d b/docs/cmdline-opts/ech.d
new file mode 100644
index 0000000..d373e8a
--- /dev/null
+++ b/docs/cmdline-opts/ech.d
@@ -0,0 +1,15 @@
+c: Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
+SPDX-License-Identifier: curl
+Long: ech
+Arg: <name>
+Help: TLS Encrypted Client Hello (ECH)
+Added: x.xx.x
+Category: tls ECH
+Example: --ech $URL
+See-also: echconfig echpublic ech-hard doh-url
+Multi: single
+---
+Enable Encrypted Client Hello (ECH) for use with the TLS session, if
+pssible, i.e. this is opportunistic.
+
+This option only works with TLS 1.3.
diff --git a/docs/cmdline-opts/echconfig.d b/docs/cmdline-opts/echconfig.d
new file mode 100644
index 0000000..2c8cfe8
--- /dev/null
+++ b/docs/cmdline-opts/echconfig.d
@@ -0,0 +1,17 @@
+c: Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
+SPDX-License-Identifier: curl
+Long: echconfig
+Arg: <name>
+Help: TLS Encrypted Client Hello (ECH)
+Added: x.xx.x
+Category: tls ECH
+Example: --echconfig $B64CONFIG $URL
+See-also: ech echpublic ech-hard doh-url
+Multi: single
+---
+Enable Encrypted Client Hello (ECH) for use with the TLS session by
+providing a base64-encoded ECHConfigList on the command line rather
+than by acquring that value via an HTTPS resource record from the
+DNS.
+
+This option only works with TLS 1.3.
diff --git a/docs/cmdline-opts/echpublic.d b/docs/cmdline-opts/echpublic.d
new file mode 100644
index 0000000..2d029c1
--- /dev/null
+++ b/docs/cmdline-opts/echpublic.d
@@ -0,0 +1,16 @@
+c: Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
+SPDX-License-Identifier: curl
+Long: echpublic
+Arg: <name>
+Help: TLS Encrypted Client Hello (ECH)
+Added: x.xx.x
+Category: tls ECH
+Example: --echpubli $PUBLIC_NAME $URL
+See-also: ech echconfig ech-hard doh-url
+Multi: single
+---
+When doing Encrypted Client Hello (ECH), over-ride the public_name
+from the relevant ECHConfigList in the outer ClientHello server name
+indication extension.
+
+This option only works with TLS 1.3.
diff --git a/m4/curl-confopts.m4 b/m4/curl-confopts.m4
index 37f7d4c..41cdb45 100644
--- a/m4/curl-confopts.m4
+++ b/m4/curl-confopts.m4
@@ -631,6 +631,42 @@ AC_DEFUN([CURL_CHECK_NTLM_WB], [
   fi
 ])
 
+dnl CURL_CHECK_OPTION_HTTPSRR
+dnl -----------------------------------------------------
+dnl Verify whether configure has been invoked with option
+dnl --enable-httpsrr or --disable-httpsrr, and set
+dnl shell variable want_httpsrr as appropriate.
+
+AC_DEFUN([CURL_CHECK_OPTION_HTTPSRR], [
+  AC_MSG_CHECKING([whether to enable HTTPSRR support])
+  OPT_HTTPSRR="default"
+  AC_ARG_ENABLE(httpsrr,
+AS_HELP_STRING([--enable-httpsrr],[Enable HTTPSRR support])
+AS_HELP_STRING([--disable-httpsrr],[Disable HTTPSRR support]),
+  OPT_HTTPSRR=$enableval)
+  case "$OPT_HTTPSRR" in
+    no)
+      dnl --disable-httpsrr option used
+      want_httpsrr="no"
+      curl_httpsrr_msg="no      (--enable-httpsrr)"
+      AC_MSG_RESULT([no])
+      ;;
+    default)
+      dnl configure option not specified
+      want_httpsrr="no"
+      curl_httpsrr_msg="no      (--enable-httpsrr)"
+      AC_MSG_RESULT([no])
+      ;;
+    *)
+      dnl --enable-httpsrr option used
+      want_httpsrr="yes"
+      curl_httpsrr_msg="enabled (--disable-httpsrr)"
+      experimental="httpsrr"
+      AC_MSG_RESULT([yes])
+      ;;
+  esac
+])
+
 dnl CURL_CHECK_OPTION_ECH
 dnl -----------------------------------------------------
 dnl Verify whether configure has been invoked with option
@@ -666,3 +702,4 @@ AS_HELP_STRING([--disable-ech],[Disable ECH support]),
       ;;
   esac
 ])
+])
